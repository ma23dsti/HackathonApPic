import streamlit as st
from menu import display_menu

st.set_page_config(page_title="Plateforme de Pr√©diction de Trafic R√©seau", page_icon="üö¶", layout="wide")

def show():
    st.title("Plateforme de Pr√©diction de Trafic R√©seau")
    st.header("""
    Bienvenue sur la plateforme de pr√©diction de trafic r√©seau !
    Utilisez la barre lat√©rale pour naviguer entre les pages.
    """, divider=True)

    # Initialiser st.session_state
    if 'choix_modele' not in st.session_state:
        st.session_state['choix_modele'] = None
    if 'taille_fenetre' not in st.session_state:
        st.session_state['taille_fenetre'] = None
    if 'nombre_predictions' not in st.session_state:
        st.session_state['nombre_predictions'] = None

    # Question pour l'utilisateur
    choix_modele_options = {
        "Pr√©dire avec le mod√®le pr√©-charg√©": 0,
        "Entrainer un mod√®le et faire une pr√©diction": 1,
        "Pr√©dire avec un mod√®le externe √† charger sur la plateforme": 2
    }

    st.markdown(
    """
        <style>
    div[class*="stRadio"] > label > div[data-testid="stMarkdownContainer"] > p {
        font-size: 26px;
    }
        </style>
    """, unsafe_allow_html=True)

    # Utiliser st.radio pour d√©tecter les changements
    choix_modele = st.radio(
        "**Choisissez une option :**",
        options=list(choix_modele_options.keys()),
        index=None
    )

    # Options pour la taille de la fen√™tre et le nombre de pr√©dictions
    options_combinees = {
        "5 pr√©dictions / 60 secondes": (5, 60),
        "30 pr√©dictions / 360 secondes": (30, 360),
        "60 pr√©dictions / 720 secondes": (60, 720),
        "300 pr√©dictions / 3600 secondes": (300, 3600)
    }

    # Afficher les options dans une seule selectbox
    option_select = st.selectbox(
        "Choisissez le nombre de pr√©dictions et la taille de la fen√™tre",
        options=list(options_combinees.keys()),
        index=None,
        placeholder="Choisissez une option"
    )

    # Ajouter les autres options dans ce dictionnaire
    unite_mesure_options = [
        "Octets",
        "Bits/s"
    ]
    unite_mesure = st.selectbox("Unit√© de mesure", options=unite_mesure_options, index=None, placeholder="Choisis une option")


    # Bouton pour valider les choix et mettre √† jour le menu dans la sidebar
    if st.button("Valider les choix"):
        if choix_modele is None:
            st.error("Veuillez choisir une option valide pour le mod√®le.")
        elif unite_mesure is None:
            st.error("Veuillez choisir une unit√© de mesure.")
        elif option_select is None:
            st.error("Veuillez choisir une option valide pour le nombre de pr√©dictions et la taille de la fen√™tre.")
        else:
            st.session_state['choix_modele'] = choix_modele_options[choix_modele]
            st.session_state['taille_fenetre'] = options_combinees[option_select][1]
            st.session_state['nombre_predictions'] = options_combinees[option_select][0]
            st.session_state['unite_mesure'] = unite_mesure
            st.session_state.valid_acceuil = True
            st.rerun()
        
    # Message de validation pour l'utilisateur afin de passer √† l'√©tape suivante
    if st.session_state.valid_acceuil:
        st.success("Choix valid√© avec succ√®s ! Vous pouvez passer √† l'√©tape suivante.")

    st.markdown("""---""")

if __name__ == "__main__":

    # Initialiser st.session_state sinon display_menu() ne fonctionnera pas
    # Liste des cl√©s √† initialiser
    key_user_choices = ['choix_modele', 'taille_fenetre', 'nombre_predictions', 'unite_mesure']
    keys_to_initialize = ['valid_acceuil', 'valid_depot_donnees', 'valid_entrainement', 'valid_predictions', 'valid_statistiques']

    # Initialisation des cl√©s dans st.session_state
    for key in key_user_choices:
        if key not in st.session_state:
            st.session_state[key] = None

    for key in keys_to_initialize:
        if key not in st.session_state:
            st.session_state[key] = False

    with st.sidebar:
        if st.session_state.choix_modele is None:
            st.sidebar.page_link("1_üè†_Accueil.py", label="Accueil", icon="üè†")
            st.sidebar.markdown("""---""")
            st.sidebar.write("**session_state pour debug :**")
            st.sidebar.write(st.session_state)
        else:
            display_menu()
    show()
